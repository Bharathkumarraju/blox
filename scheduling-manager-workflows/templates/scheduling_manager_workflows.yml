AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:

  GetDeploymentDataLambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref DeploymentWorkflowLambdaHandler
      FunctionVersion: $LATEST
      Name: GetDeploymentData

  GetStateDataLambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref DeploymentWorkflowLambdaHandler
      FunctionVersion: $LATEST
      Name: GetStateData

  StartDeploymentLambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref DeploymentWorkflowLambdaHandler
      FunctionVersion: $LATEST
      Name: StartDeployment

  StartTaskLambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref TaskWorkflowLambdaHandler
      FunctionVersion: $LATEST
      Name: StartTask

  CheckTaskStateLambdaAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      FunctionName: !Ref TaskWorkflowLambdaHandler
      FunctionVersion: $LATEST
      Name: CheckTaskState

  DeploymentWorkflowLambdaHandler:
    Type: AWS::Serverless::Function
    Properties:
       Handler: com.amazonaws.blox.schedulingmanager.handler.MainLambdaHandler
       Runtime: java8
       CodeUri: ../build/distributions/scheduling-manager-workflows.zip
       Timeout: 60
       MemorySize: 256
       Environment:
         Variables:
           "START_TASK_WF_ARN": !Sub
             - 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StartTaskWorkflowName}'
             - StartTaskWorkflowName: !GetAtt [ StartTaskWorkflow, Name ]
       Policies:
         - Version: '2012-10-17' # Policy Document
           Statement:
             - Effect: Allow
               Action:
                 - dynamodb:GetItem
                 - dynamodb:PutItem
                 - dynamodb:UpdateItem
                 - dynamodb:Query
               Resource: !Sub
                 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Deployments'
         - Version: '2012-10-17' # Policy Document
           Statement:
             - Effect: Allow
               Action:
                 - states:StartExecution
               Resource: !Sub
                 - 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StartTaskWorkflowName}'
                 - StartTaskWorkflowName: !GetAtt [ StartTaskWorkflow, Name ]

  TaskWorkflowLambdaHandler:
    Type: AWS::Serverless::Function
    Properties:
       Handler: com.amazonaws.blox.schedulingmanager.handler.MainLambdaHandler
       Runtime: java8
       CodeUri: ../build/distributions/scheduling-manager-workflows.zip
       Timeout: 60
       MemorySize: 256
       Policies:
         - Version: '2012-10-17' # Policy Document
           Statement:
             - Effect: Allow
               Action:
                 - sts:AssumeRole
               Resource: "*"

  StartTaskWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub |
          {
            "StartAt": "StartTask",
            "States": {
              "StartTask": {
                "Type": "Task",
                "Resource": "${StartTaskLambdaAlias}",
                "Next": "CheckTaskState"
              },
              "WaitForJobStatus": {
                "Type": "Wait",
                "Seconds": 1,
                "Next": "CheckTaskState"
              },
              "CheckTaskState": {
                "Type" : "Task",
                "Resource": "${CheckTaskStateLambdaAlias}",
                "Next": "Task Running?"
              },
              "Task Running?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.status",
                    "StringEquals": "FAILED",
                    "Next": "Job Failed"
                  },
                  {
                    "Variable": "$.status",
                    "StringEquals": "RUNNING",
                    "Next": "SuccessState"
                  }
                ],
                "Default": "WaitForJobStatus"
              },
              "Job Failed": {
                "Type": "Fail",
                "Cause": "Task Failed",
                "Error": ""
              },
              "SuccessState": {
                "Type": "Succeed"
              }
            }
          }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  DeploymentWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub |
          {
            "StartAt": "GetDeploymentData",
            "States": {
              "GetDeploymentData": {
                "Type": "Task",
                "Resource": "${GetDeploymentDataLambdaAlias}",
                "Next": "GetStateData"
              },
              "GetStateData": {
                "Type" : "Task",
                "Resource": "${GetStateDataLambdaAlias}",
                "Next": "StartDeployment"
              },
              "StartDeployment": {
                "Type" : "Task",
                "Resource": "${StartDeploymentLambdaAlias}",
                "End": true
              }
            }
          }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"