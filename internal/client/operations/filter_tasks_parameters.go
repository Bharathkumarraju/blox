// Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the License). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the license file accompanying this file. This file is distributed
// on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFilterTasksParams creates a new FilterTasksParams object
// with the default values initialized.
func NewFilterTasksParams() *FilterTasksParams {
	var ()
	return &FilterTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFilterTasksParamsWithTimeout creates a new FilterTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFilterTasksParamsWithTimeout(timeout time.Duration) *FilterTasksParams {
	var ()
	return &FilterTasksParams{

		timeout: timeout,
	}
}

// NewFilterTasksParamsWithContext creates a new FilterTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewFilterTasksParamsWithContext(ctx context.Context) *FilterTasksParams {
	var ()
	return &FilterTasksParams{

		Context: ctx,
	}
}

/*FilterTasksParams contains all the parameters to send to the API endpoint
for the filter tasks operation typically these are written to a http.Request
*/
type FilterTasksParams struct {

	/*Status
	  Status to filter tasks by

	*/
	Status string

	timeout time.Duration
	Context context.Context
}

// WithTimeout adds the timeout to the filter tasks params
func (o *FilterTasksParams) WithTimeout(timeout time.Duration) *FilterTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filter tasks params
func (o *FilterTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filter tasks params
func (o *FilterTasksParams) WithContext(ctx context.Context) *FilterTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filter tasks params
func (o *FilterTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithStatus adds the status to the filter tasks params
func (o *FilterTasksParams) WithStatus(status string) *FilterTasksParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the filter tasks params
func (o *FilterTasksParams) SetStatus(status string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *FilterTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param status
	qrStatus := o.Status
	qStatus := qrStatus
	if qStatus != "" {
		if err := r.SetQueryParam("status", qStatus); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
