// Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/store/task.go

package mocks

import (
	context "context"

	types "github.com/blox/blox/daemon-scheduler/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of TaskStore interface
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *_MockTaskStoreRecorder
}

// Recorder for MockTaskStore (not exported)
type _MockTaskStoreRecorder struct {
	mock *MockTaskStore
}

func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &_MockTaskStoreRecorder{mock}
	return mock
}

func (_m *MockTaskStore) EXPECT() *_MockTaskStoreRecorder {
	return _m.recorder
}

func (_m *MockTaskStore) PutTask(ctx context.Context, envName string, task types.Task) error {
	ret := _m.ctrl.Call(_m, "PutTask", ctx, envName, task)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTaskStoreRecorder) PutTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTask", arg0, arg1, arg2)
}
