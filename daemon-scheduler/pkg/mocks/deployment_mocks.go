// Copyright 2016-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/deployment/deployment.go

package mocks

import (
	context "context"
	types0 "github.com/blox/blox/daemon-scheduler/pkg/store/types"
	types "github.com/blox/blox/daemon-scheduler/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Deployment interface
type MockDeployment struct {
	ctrl     *gomock.Controller
	recorder *_MockDeploymentRecorder
}

// Recorder for MockDeployment (not exported)
type _MockDeploymentRecorder struct {
	mock *MockDeployment
}

func NewMockDeployment(ctrl *gomock.Controller) *MockDeployment {
	mock := &MockDeployment{ctrl: ctrl}
	mock.recorder = &_MockDeploymentRecorder{mock}
	return mock
}

func (_m *MockDeployment) EXPECT() *_MockDeploymentRecorder {
	return _m.recorder
}

func (_m *MockDeployment) CreateDeployment(ctx context.Context, environmentName string, token string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "CreateDeployment", ctx, environmentName, token)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) CreateDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDeployment", arg0, arg1, arg2)
}

func (_m *MockDeployment) CreateSubDeployment(ctx context.Context, environmentName string, instanceARNs []*string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "CreateSubDeployment", ctx, environmentName, instanceARNs)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) CreateSubDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSubDeployment", arg0, arg1, arg2)
}

func (_m *MockDeployment) StartDeployment(ctx context.Context, environmentName string, instanceARNs []*string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "StartDeployment", ctx, environmentName, instanceARNs)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) StartDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartDeployment", arg0, arg1, arg2)
}

func (_m *MockDeployment) UpdateInProgressDeployment(ctx context.Context, environmentName string, deployment *types.Deployment) error {
	ret := _m.ctrl.Call(_m, "UpdateInProgressDeployment", ctx, environmentName, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeploymentRecorder) UpdateInProgressDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInProgressDeployment", arg0, arg1, arg2)
}

func (_m *MockDeployment) GetDeployment(ctx context.Context, environmentName string, id string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetDeployment", ctx, environmentName, id)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) GetDeployment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployment", arg0, arg1, arg2)
}

func (_m *MockDeployment) GetCurrentDeployment(ctx context.Context, environmentName string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentDeployment", ctx, environmentName)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) GetCurrentDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentDeployment", arg0, arg1)
}

func (_m *MockDeployment) GetPendingDeployment(ctx context.Context, environmentName string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetPendingDeployment", ctx, environmentName)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) GetPendingDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPendingDeployment", arg0, arg1)
}

func (_m *MockDeployment) GetInProgressDeployment(ctx context.Context, environmentName string) (*types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetInProgressDeployment", ctx, environmentName)
	ret0, _ := ret[0].(*types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) GetInProgressDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInProgressDeployment", arg0, arg1)
}

func (_m *MockDeployment) ListDeploymentsSortedReverseChronologically(ctx context.Context, environmentName string) ([]types.Deployment, error) {
	ret := _m.ctrl.Call(_m, "ListDeploymentsSortedReverseChronologically", ctx, environmentName)
	ret0, _ := ret[0].([]types.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) ListDeploymentsSortedReverseChronologically(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDeploymentsSortedReverseChronologically", arg0, arg1)
}

func (_m *MockDeployment) ValidateAndCreateDeployment(token string) (types0.ValidateAndUpdateEnvironment, *types.Deployment) {
	ret := _m.ctrl.Call(_m, "ValidateAndCreateDeployment", token)
	ret0, _ := ret[0].(types0.ValidateAndUpdateEnvironment)
	ret1, _ := ret[1].(*types.Deployment)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) ValidateAndCreateDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateAndCreateDeployment", arg0)
}

func (_m *MockDeployment) ValidateAndCreateSubDeployment(instanceARNs []*string) (types0.ValidateAndUpdateEnvironment, *types.Deployment) {
	ret := _m.ctrl.Call(_m, "ValidateAndCreateSubDeployment", instanceARNs)
	ret0, _ := ret[0].(types0.ValidateAndUpdateEnvironment)
	ret1, _ := ret[1].(*types.Deployment)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) ValidateAndCreateSubDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateAndCreateSubDeployment", arg0)
}

func (_m *MockDeployment) ValidateAndStartDeployment(instanceARNs []*string) (types0.ValidateAndUpdateEnvironment, *types.Deployment) {
	ret := _m.ctrl.Call(_m, "ValidateAndStartDeployment", instanceARNs)
	ret0, _ := ret[0].(types0.ValidateAndUpdateEnvironment)
	ret1, _ := ret[1].(*types.Deployment)
	return ret0, ret1
}

func (_mr *_MockDeploymentRecorder) ValidateAndStartDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateAndStartDeployment", arg0)
}

func (_m *MockDeployment) ValidateAndUpdateInProgressDeployment(deployment *types.Deployment) types0.ValidateAndUpdateEnvironment {
	ret := _m.ctrl.Call(_m, "ValidateAndUpdateInProgressDeployment", deployment)
	ret0, _ := ret[0].(types0.ValidateAndUpdateEnvironment)
	return ret0
}

func (_mr *_MockDeploymentRecorder) ValidateAndUpdateInProgressDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateAndUpdateInProgressDeployment", arg0)
}
