# Adapted from http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DesiredInstances:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster.
  DesiredTasks:
    Type: Number
    Default: '1'
    Description: Number of tasks to launch in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-5e414e24
    us-east-2:
      AMIID: ami-67ab9e02
    us-west-1:
      AMIID: ami-00898660
    us-west-2:
      AMIID: ami-10ed6968
    eu-west-1:
      AMIID: ami-880d64f1
    eu-central-1:
      AMIID: ami-63cbae0c
    ap-northeast-1:
      AMIID: ami-e3166185
    ap-southeast-1:
      AMIID: ami-66c98f1a
    ap-southeast-2:
      AMIID: ami-36867d54
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
  TransientTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: ['', [{ Ref: 'AWS::StackName' }, -transient-task]]
      ContainerDefinitions:
      - Name: sleep
        Cpu: '10'
        Memory: '300'
        Essential: 'true'
        Image: 'alpine:latest'
        Command: ['/bin/sh', '-c', 'sleep $TIME']
        Environment:
        - Name: TIME
          Value: "60"
  PersistentTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: ['', [{ Ref: 'AWS::StackName' }, -persistent-task]]
      ContainerDefinitions:
      - Name: sleep
        Cpu: '10'
        Memory: '300'
        Essential: 'true'
        Image: 'alpine:latest'
        Command: ['/bin/sh', '-c', 'trap : TERM INT; sleep infinity & wait']
        Environment:
        - Name: TIME
          Value: "60"
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: { Ref: 'ContainerInstances' }
      MinSize: '1'
      MaxSize: '10'
      DesiredCapacity: { Ref: 'DesiredInstances' }
      AvailabilityZones:
        Fn::GetAZs: ""
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap: [AWSRegionToAMI, { Ref: 'AWS::Region' }, AMIID]
      SecurityGroups: [{ Ref: 'SecurityGroup' }]
      InstanceType: { Ref: 'InstanceType' }
      IamInstanceProfile: { Ref: 'EC2InstanceProfile' }
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [{ Ref: 'EC2Role' }]
Outputs:
  cluster:
    Value: { Ref: 'Cluster' }
  transienttask:
    Value: { Ref: 'TransientTask' }
  persistenttask:
    Value: { Ref: 'PersistentTask' }
