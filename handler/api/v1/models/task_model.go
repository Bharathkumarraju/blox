package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskModel task model
// swagger:model TaskModel
type TaskModel struct {

	// cluster a r n
	// Required: true
	ClusterARN *string `json:"clusterARN"`

	// container instance a r n
	// Required: true
	ContainerInstanceARN *string `json:"containerInstanceARN"`

	// containers
	// Required: true
	Containers []*TaskContainerModel `json:"containers"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// desired status
	// Required: true
	DesiredStatus *string `json:"desiredStatus"`

	// last status
	// Required: true
	LastStatus *string `json:"lastStatus"`

	// overrides
	// Required: true
	Overrides *TaskOverrideModel `json:"overrides"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`

	// started by
	StartedBy string `json:"startedBy,omitempty"`

	// stopped at
	StoppedAt string `json:"stoppedAt,omitempty"`

	// stopped reason
	StoppedReason string `json:"stoppedReason,omitempty"`

	// task a r n
	// Required: true
	TaskARN *string `json:"taskARN"`

	// task definition a r n
	// Required: true
	TaskDefinitionARN *string `json:"taskDefinitionARN"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updatedAt"`

	// version
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this task model
func (m *TaskModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterARN(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainerInstanceARN(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDesiredStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskARN(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskDefinitionARN(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskModel) validateClusterARN(formats strfmt.Registry) error {

	if err := validate.Required("clusterARN", "body", m.ClusterARN); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateContainerInstanceARN(formats strfmt.Registry) error {

	if err := validate.Required("containerInstanceARN", "body", m.ContainerInstanceARN); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateContainers(formats strfmt.Registry) error {

	if err := validate.Required("containers", "body", m.Containers); err != nil {
		return err
	}

	for i := 0; i < len(m.Containers); i++ {

		if swag.IsZero(m.Containers[i]) { // not required
			continue
		}

		if m.Containers[i] != nil {

			if err := m.Containers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TaskModel) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateDesiredStatus(formats strfmt.Registry) error {

	if err := validate.Required("desiredStatus", "body", m.DesiredStatus); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateLastStatus(formats strfmt.Registry) error {

	if err := validate.Required("lastStatus", "body", m.LastStatus); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateOverrides(formats strfmt.Registry) error {

	if err := validate.Required("overrides", "body", m.Overrides); err != nil {
		return err
	}

	if m.Overrides != nil {

		if err := m.Overrides.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TaskModel) validateTaskARN(formats strfmt.Registry) error {

	if err := validate.Required("taskARN", "body", m.TaskARN); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateTaskDefinitionARN(formats strfmt.Registry) error {

	if err := validate.Required("taskDefinitionARN", "body", m.TaskDefinitionARN); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TaskModel) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
