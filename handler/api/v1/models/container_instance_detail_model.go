package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ContainerInstanceDetailModel container instance detail model

swagger:model ContainerInstanceDetailModel
*/
type ContainerInstanceDetailModel struct {

	/* agent connected

	Required: true
	*/
	AgentConnected *bool `json:"agentConnected"`

	/* agent update status
	 */
	AgentUpdateStatus string `json:"agentUpdateStatus,omitempty"`

	/* attributes
	 */
	Attributes []*ContainerInstanceDetailAttributeModel `json:"attributes,omitempty"`

	/* cluster arn

	Required: true
	*/
	ClusterArn *string `json:"clusterArn"`

	/* container instance arn

	Required: true
	*/
	ContainerInstanceArn *string `json:"containerInstanceArn"`

	/* ec2 instance Id
	 */
	Ec2InstanceID string `json:"ec2InstanceId,omitempty"`

	/* pending tasks count

	Required: true
	*/
	PendingTasksCount *int32 `json:"pendingTasksCount"`

	/* registered resources

	Required: true
	*/
	RegisteredResources []*ContainerInstanceDetailRegisteredResourceModel `json:"registeredResources"`

	/* remaining resources

	Required: true
	*/
	RemainingResources []*ContainerInstanceDetailRemainingResourceModel `json:"remainingResources"`

	/* running tasks count

	Required: true
	*/
	RunningTasksCount *int32 `json:"runningTasksCount"`

	/* status

	Required: true
	*/
	Status *string `json:"status"`

	/* updated at

	Required: true
	*/
	UpdatedAt *string `json:"updatedAt"`

	/* version

	Required: true
	*/
	Version *int32 `json:"version"`

	/* version info

	Required: true
	*/
	VersionInfo *ContainerInstanceDetailVersionInfoModel `json:"versionInfo"`
}

// Validate validates this container instance detail model
func (m *ContainerInstanceDetailModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentConnected(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClusterArn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainerInstanceArn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePendingTasksCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegisteredResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRemainingResources(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRunningTasksCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersionInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerInstanceDetailModel) validateAgentConnected(formats strfmt.Registry) error {

	if err := validate.Required("agentConnected", "body", m.AgentConnected); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {

		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {

			if err := m.Attributes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateClusterArn(formats strfmt.Registry) error {

	if err := validate.Required("clusterArn", "body", m.ClusterArn); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateContainerInstanceArn(formats strfmt.Registry) error {

	if err := validate.Required("containerInstanceArn", "body", m.ContainerInstanceArn); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validatePendingTasksCount(formats strfmt.Registry) error {

	if err := validate.Required("pendingTasksCount", "body", m.PendingTasksCount); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateRegisteredResources(formats strfmt.Registry) error {

	if err := validate.Required("registeredResources", "body", m.RegisteredResources); err != nil {
		return err
	}

	for i := 0; i < len(m.RegisteredResources); i++ {

		if swag.IsZero(m.RegisteredResources[i]) { // not required
			continue
		}

		if m.RegisteredResources[i] != nil {

			if err := m.RegisteredResources[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateRemainingResources(formats strfmt.Registry) error {

	if err := validate.Required("remainingResources", "body", m.RemainingResources); err != nil {
		return err
	}

	for i := 0; i < len(m.RemainingResources); i++ {

		if swag.IsZero(m.RemainingResources[i]) { // not required
			continue
		}

		if m.RemainingResources[i] != nil {

			if err := m.RemainingResources[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateRunningTasksCount(formats strfmt.Registry) error {

	if err := validate.Required("runningTasksCount", "body", m.RunningTasksCount); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *ContainerInstanceDetailModel) validateVersionInfo(formats strfmt.Registry) error {

	if err := validate.Required("versionInfo", "body", m.VersionInfo); err != nil {
		return err
	}

	if m.VersionInfo != nil {

		if err := m.VersionInfo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
